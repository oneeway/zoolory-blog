name: 🚀 Deploy Hugo Site

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.125.0
    
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        
    - name: 🛠️ Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.125.0'
        extended: true
        
    - name: 📝 Generate Build Info
      run: |
        mkdir -p data
        echo "---" > data/build_info.yaml
        echo "build_date: $(date --iso-8601)" >> data/build_info.yaml
        echo "build_year: $(date +%Y)" >> data/build_info.yaml
        echo "build_timestamp: $(date +%s)" >> data/build_info.yaml
        
    - name: 🏗️ Build Hugo Site
      run: hugo --minify --gc --enableGitInfo
        
    - name: 🤖 Generate Robots.txt
      run: |
        cat > public/robots.txt << 'EOF'
        User-agent: *
        Allow: /
        Disallow: /admin/
        Disallow: /private/
        
        Sitemap: https://blog.zoolory.de/sitemap.xml
        EOF
        
    - name: 📊 Generate Schema.org JSON-LD
      run: |
        cat > public/schema.json << 'EOF'
        {
          "@context": "https://schema.org",
          "@type": "WebSite",
          "name": "Zoolory Blog",
          "description": "Ehrliche Produkttests und Ratgeber für Hunde- und Katzenbesitzer",
          "url": "https://blog.zoolory.de",
          "potentialAction": {
            "@type": "SearchAction",
            "target": "https://blog.zoolory.de/search?q={search_term_string}",
            "query-input": "required name=search_term_string"
          },
          "author": {
            "@type": "Organization",
            "name": "Zoolory Team"
          }
        }
        EOF
        
    - name: ✅ Validate Build
      run: |
        if [ -f "public/sitemap.xml" ]; then
          echo "✅ Sitemap generated successfully"
          echo "📊 Sitemap contains $(grep -c '<url>' public/sitemap.xml || echo '0') URLs"
        else
          echo "❌ Sitemap missing!"
          exit 1
        fi
        
        if [ -f "public/index.html" ]; then
          echo "✅ Homepage generated successfully"
        else
          echo "❌ Homepage missing!"
          exit 1
        fi
        
    - name: 📤 Upload Pages Artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 📈 Notify Search Engines
      if: github.ref == 'refs/heads/main'
      run: |
        # Google Search Console ping
        curl -X GET "https://www.google.com/ping?sitemap=https://blog.zoolory.de/sitemap.xml" || echo "Google ping failed"
        
        # Bing Webmaster ping  
        curl -X GET "https://www.bing.com/ping?sitemap=https://blog.zoolory.de/sitemap.xml" || echo "Bing ping failed"
        
    - name: 📊 Deployment Summary
      run: |
        echo "🎉 Deployment successful!"
        echo "📊 Site URL: ${{ steps.deployment.outputs.page_url }}"
        echo "🗺️ Sitemap: ${{ steps.deployment.outputs.page_url }}sitemap.xml"
        echo "🤖 Robots: ${{ steps.deployment.outputs.page_url }}robots.txt"

  content-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4
      
    - name: 🔍 Basic Content Check
      run: |
        echo "🔍 Running content quality checks..."
        
        # Check for meta descriptions
        missing_desc=0
        if [ -d "content/posts" ]; then
          while IFS= read -r -d '' file; do
            if ! grep -q "description:" "$file"; then
              echo "⚠️  Missing description in: $file"
              missing_desc=$((missing_desc + 1))
            fi
          done < <(find content/posts -name "*.md" -print0)
          
          if [ $missing_desc -eq 0 ]; then
            echo "✅ All posts have descriptions"
          else
            echo "⚠️  $missing_desc posts missing descriptions"
          fi
        else
          echo "ℹ️  No content/posts directory found"
        fi
        
        echo "✅ Content check completed"
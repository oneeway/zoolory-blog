name: 🚀 Deploy SEO-Optimized Hugo Site

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Automatisches Rebuild täglich um 6 Uhr (für frische Daten)
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Manueller Trigger

# Permissions für GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Verhindert parallel laufende Deployments
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build Job mit SEO-Optimierungen
  build:
    runs-on: ubuntu-latest
    env:
      HUGO_VERSION: 0.125.0
    
    steps:
    - name: 📦 Checkout Repository
      uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0
        
    - name: 🛠️ Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.125.0'
        extended: true
        
    - name: 📱 Setup Node.js (für zusätzliche Tools)
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: |
        npm install -g @lhci/cli@0.12.x
        npm install -g imagemin-cli
        npm install -g html-minifier-terser
        npm install -g clean-css-cli
        
    - name: 🖼️ Optimize Images (SEO Performance boost)
      run: |
        # WebP Konvertierung für bessere Performance
        find static/images -name "*.jpg" -o -name "*.png" | while read img; do
          if [ ! -f "${img%.*}.webp" ]; then
            cwebp -q 85 "$img" -o "${img%.*}.webp"
          fi
        done
        
        # Bildkomprimierung
        find static/images -name "*.jpg" -exec jpegoptim --max=85 {} \;
        find static/images -name "*.png" -exec optipng -o7 {} \;
        
    - name = 📝 Generate Dynamic Content
      run: |
        # Generiere aktuelle Datumsangaben für "Letzte Aktualisierung"
        echo "---" > data/build_info.yaml
        echo "build_date: $(date --iso-8601)" >> data/build_info.yaml
        echo "build_year: $(date +%Y)" >> data/build_info.yaml
        echo "build_timestamp: $(date +%s)" >> data/build_info.yaml
        
    - name: 🏗️ Build Hugo Site
      run: |
        hugo --minify --gc --enableGitInfo
        
    - name: 🎯 Advanced SEO Optimizations
      run: |
        # Zusätzliche HTML-Minification
        find public -name "*.html" -exec html-minifier-terser \
          --collapse-whitespace \
          --remove-comments \
          --remove-optional-tags \
          --remove-redundant-attributes \
          --remove-script-type-attributes \
          --remove-tag-whitespace \
          --use-short-doctype \
          --minify-css true \
          --minify-js true \
          {} --output {} \;
          
        # CSS zusätzlich optimieren
        find public -name "*.css" -exec cleancss -o {} {} \;
        
        # Robots.txt optimieren
        echo "User-agent: *" > public/robots.txt
        echo "Allow: /" >> public/robots.txt
        echo "Disallow: /admin/" >> public/robots.txt
        echo "Disallow: /private/" >> public/robots.txt
        echo "" >> public/robots.txt
        echo "Sitemap: https://blog.zoolory.de/sitemap.xml" >> public/robots.txt
        
    - name: 📊 Generate Analytics & Schema
      run: |
        # Erstelle JSON-LD Schema.org für bessere SEO
        cat > public/schema.json << 'EOF'
        {
          "@context": "https://schema.org",
          "@type": "WebSite",
          "name": "Zoolory Blog",
          "description": "Ehrliche Produkttests und Ratgeber für Hunde- und Katzenbesitzer",
          "url": "https://blog.zoolory.de",
          "potentialAction": {
            "@type": "SearchAction",
            "target": "https://blog.zoolory.de/search?q={search_term_string}",
            "query-input": "required name=search_term_string"
          },
          "author": {
            "@type": "Organization",
            "name": "Zoolory Team"
          }
        }
        EOF
        
    - name: 🔍 Performance & SEO Audit
      run: |
        # Lighthouse CI für Performance-Check
        lhci healthcheck || echo "LHCI not available, skipping audit"
        
        # Sitemap Validation
        if [ -f "public/sitemap.xml" ]; then
          echo "✅ Sitemap generated successfully"
          echo "📊 Sitemap contains $(grep -c '<url>' public/sitemap.xml) URLs"
        else
          echo "❌ Sitemap missing!"
          exit 1
        fi
        
        # Check for broken internal links
        find public -name "*.html" -exec grep -l "href.*#" {} \; | head -5
        
    - name: 📤 Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public

  # Deploy Job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: 🚀 Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: 🔄 Purge Cloudflare Cache (optional)
      if: github.ref == 'refs/heads/main'
      run: |
        # Falls du Cloudflare verwendest
        echo "Cache purge would happen here"
        # curl -X POST "https://api.cloudflare.com/client/v4/zones/$CF_ZONE_ID/purge_cache" \
        #   -H "Authorization: Bearer $CF_API_TOKEN" \
        #   -H "Content-Type: application/json" \
        #   --data '{"purge_everything":true}'
        
    - name: 📈 Notify Google (Index schneller)
      if: github.ref == 'refs/heads/main'
      run: |
        # Google Search Console ping
        curl -X GET "https://www.google.com/ping?sitemap=https://blog.zoolory.de/sitemap.xml" || true
        
        # Bing Webmaster ping
        curl -X GET "https://www.bing.com/ping?sitemap=https://blog.zoolory.de/sitemap.xml" || true
        
    - name: 📊 Performance Report
      run: |
        echo "🎉 Deployment successful!"
        echo "📊 Site deployed to: ${{ steps.deployment.outputs.page_url }}"
        echo "🗺️ Sitemap: ${{ steps.deployment.outputs.page_url }}sitemap.xml"
        echo "🤖 Robots: ${{ steps.deployment.outputs.page_url }}robots.txt"
        
    - name: 💬 Slack/Discord Notification (optional)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Hier könntest du Slack/Discord Notifications senden"
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚀 Zoolory Blog deployed successfully!"}' \
        #   $SLACK_WEBHOOK_URL

# Separate Job für Content-Optimierung
  content-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📦 Checkout
      uses: actions/checkout@v4
      
    - name: 🔍 Content Quality Check
      run: |
        echo "🔍 Checking content quality..."
        
        # Check für Affiliate-Disclaimer
        if ! grep -r "affiliate" content/posts/ --include="*.md"; then
          echo "⚠️ Warning: No affiliate disclaimers found"
        fi
        
        # Check für Meta-Descriptions
        find content/posts -name "*.md" -exec grep -L "description:" {} \; | while read file; do
          echo "❌ Missing description in: $file"
        done
        
        # Check für Alt-Tags in Bildern
        find content/posts -name "*.md" -exec grep -L "alt=" {} \; | while read file; do
          echo "⚠️ Check alt-tags in: $file"  
        done
        
        echo "✅ Content check completed"